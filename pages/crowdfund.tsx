import type { NextPage } from 'next'
import Head from 'next/head'
import WalletConnect from '../components/WalletConnect'
import { useStoreActions, useStoreState } from "../utils/store"
import Link from 'next/link'
import { useState, useEffect } from 'react'
import { getAssets } from "../utils/cardano";
import NftGrid from "../components/NftGrid";
import initLucid from '../utils/lucid'
import { Lucid, Credential, TxHash, Lovelace, Constr, SpendingValidator, Data, fromText, Unit, MintingPolicy, PolicyId, Address, UTxO, applyParamsToScript, Assets, ScriptHash, Redeemer, paymentCredentialOf, KeyHash, generatePrivateKey, getAddressDetails, toUnit } from 'lucid-cardano'
import * as helios from '@hyperionbt/helios'
import {fromAssets, toAssets, union, Value} from "../utils/valueUtils"
import { fromAddress, OfferDatum, OfferInfo, toAddress } from '../utils/offerUtils'
import { kMaxLength } from 'buffer'


// import { readFirstLineFromFile } from '../utils/fileUtils';

import * as CryptoJS from 'crypto-js';
// import { contributorSeed } from '../data';

// const fs = require("fs")

// const cborHex = "590a1901000032323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323222253335734646464646a666ae68cdc39aab9d375400c9000092999ab9a337106eb4c038dd60041bad300a37580102660822660822660822660766eaccccc0b0014d5d09bac0080014a06eaccc0e8dd59981598069bac0084c0101010037566605660126eb0020c038dd600409981d9bab333302c0050020014a06eacc0a9301051a004c4b4000133029375a0086eb4c030dd60040998130029aba137580102660822660822660822660822660822660766eaccccc0b0014d5d09bac0080014a06eaccc0acc024dd60041ba8337026eb4c038dd60041bad301037580102660766eaccccc0b0014c03cdd6004000a50375666056601a6eb0021300101010013303b3756666605800a004002940dd598152601051a007270e000133029375a0086eb4c030dd60040998128998130029aba1375801026604c00a601e6eb00204cc0944cdd798081bac0084c0101000013303b3756666605800a60226eb0020005281bab3302b3009375801060206eb0020494ccd5cd19b88375a60680026eb4c028dd60040a5015333573466e24dd6981a0009bad300e3758010294054ccd5cd19b88375a660486eacc0dcc0dcc08c019300106d8799f4040ff00483030e4c1c5280992999ab9a3302a375a601e6eb00252000133042133042133042133042133042133042133023375a6604a6eacc0e0c0e0c09001d30106d8799f4040ff00482036b10244cc0f0dd59999810003002000a513756660766eaccc0ecdd59981618071bac0094c0101010037566605860146eb0024c0d4008dd59815a601051a009896800013303c3756666605a00c60206eb0024009281bab3303b37566605860146eb0024c03cdd60049bab302b4c1051a002625a0001337106eb4014dd698069bac00913302a375a00a6eb4c030dd6004899b89337026eb4c07cc078018dd6980e980f00324101756e0626604e00c60660042660842660842660842660842660842660466eb4cc094dd5981c181c1812003a60106d8799f4040ff00483030e4c1c4cc0f0dd59999810003002000a513756660766eaccc0ecdd59981618071bac0094c0101010037566605860146eb0024c0d4008dd59815a601051a00989680001337106eb4014dd698069bac00913302a375a00a6eb4c030dd6004899b89337026eb4c07cc078018dd6980e980f00324101756e0626604e00c60660046e9ccd5d01aba1375801066ae80d5d09aba2375801066ae80c024dd600419aba0300a375801066ae80d5d0980c9bac00833574060166eb0020cd5d018061bac008335740601a6eb0020cd5d0181a00099aba03032001335740606e00266ae80d5d0981400099aba03011375801066ae80d5d09aba23012375801097ae00064c011e581c89e0e1706f1b825460bd49954cc04dad5159e522e649a1ad17f3988600302f301e302f302f3034302000330183019001302d0011498588d5d0980980091aba13011001235742601c00246ae84c0300048d5d0980500091aba13008001235742600c00246ae84c0100048d5d0980100091aba230020012357446ae88c0080048d5d1180100091aba23002001235744600400246ae88c0080048d5d1180100091aba23002001235744600400246ae88d5d10009180b980b980b80091aba1300b001230153015301a0012222301b3758a666ae680044dd39980c00211981389980300080209980a80080189ba733018004233027133006001004133014001375260260064464a666ae68cdc39aab9d37540029001099baf0023015300400114a060286028004466022002900111180f19b88002001232333001001375860226022004466ebcc048004c048c05c00c8894ccd5cd1aba30021615333573460026ae840084d5d080109998018019aba2002001223233300100122533357346ae8c0045854ccd5cd19baf35573a6ae84004c0600104d55cf1aba100113300200235744002006444a666ae68d5d18008b0a999ab9a3375e6aae74d5d080098098020998010011bab35573c6ae840044ccc00c00c008d5d1000912999ab9a500214a200244660386eb0d5d09aba2300300223375e00200446ae88d5d11aba235744600400246ae88c03800488c05ccdc4801000919801260106d8799f4040ff00001225333573466e1d2000375a0022980101a0001374c66ae80cdd818048011ba633574066ec0c0380080052f5bded8c097adef6c602222300e3758a666ae680044dd39980580211980d09980480080209980400080189ba73300b00423301a1330090010041330070013752600c00646e50dd98009119baf325333573466e1cd55ce800a400426ae84d55cf0008a601014000375460100040024464a666ae68cdc39aab9d001480104cdd78011aba135573c0022940dd5180380111192999ab9a3370e6aae74dd5000a4000266ebc008c014cc010005200014a06008600800444a666ae68cdc39aab9d375400400220042c46ae84c02000488c8ccc004004dd618020018011112999ab9a35746004297ae015333573460026ae840084cd5d01aba10023330030033574400400226660060066ae880080048d5d0980100091aba230040012323333001001002223300837560046eacc014005300101a0002222533357346ae8c00c40044cccc010010d5d1001801198010009aba1003235742600400246ae88c0080048d55cf1baa0012232374c6660020026601000600497adef6c60222533357346ae8c00840044cc88c94ccd5cd1aba30011002133574066ec000cdd30008011991191998008009980780180125eb7bdb1808894ccd5cd1aba3002100113322325333573466e1c00520001002133574066ec000cdd400080119b803301100700233011006002357420046660060066ae88008004cc02401c008cc024018008d5d08011998018019aba20020012232330010013300700300222533357346ae8c0045288992999ab9a3008332232330010013300c00300222533357346ae8c0045288992999ab9a300d300d337106601800a0026601800800229404cc00c00cd5d10011aba1001330060050013300600400114a02660060066ae88008d5d0800911919800800801912999ab9a35746002297adef6c6015333573466ebcd55ce9aba1001003137566aae78d5d08008998010011aba20012232333001001003002222533357346ae8c0085200015333573466ebcd55ce9aba10020011375a6aae78d5d080109998018019aba20020012333573400294128911919191998008009998010010018020019112999ab9a357460022004266ae80d5d08009998018018011aba2001222533357346ae8c00452f5c0264a666ae68cc0200148cdd780080109998020020019aba200213357400026660080080066ae88008d55ce9aba1001323300100100322533357346ae8c00452f5c0266ae80d55ce9aba100133002002357440024464666002002006004444a666ae68d5d18010a5015333573460026ae8400852889998018019aba20020012253335734a0040022941"

const sValCborCrowdFund = "590a5f590a5c01000032323232323232323232323232323232323232323232323232323232323232323232323232323232323222232323232323232323232323253330343370e90010010991919299981b99b87480080084c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc114cdc3a4004004264646464646464646464646464a6660a466e1d20000021613232323232323232323232533305d3370e90000010a99982ea9982099b8733303d375660c002a6eb8c180048dd71830008a40042a6608266e1cc100dd5983000a9bad306000f153304133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010998219bab3060015304433304870066609e09c09c6eb4c18003cccc13cdd718300091bae30600114800854ccc1754cc104cdc399981e9bab306000a375c60c000e6eb8c180019200213304333304f04e04e3039375860c060be0086088666090e00ccc13c138138c0e4dd61830182f807999827827027181d01b8a99982e99821982219982438033304f04e04e375a60c001e66609e09c09c607406e66609e09c09c6eb4c18001054ccc1754cc104cdd79830004983000a0a9982099baf3060008306001315330413375e60c000a60c00202a6608266ebcc18001cc1800484cdd7983000318300088a99982e99821982219982438033304f04e04e303a037375660c002a6eacc18002854ccc174cdd7983000b18300058a99982e9981e191919299983019b87480000084c8c198c0fc004c18c00453011e581c0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a0030630023063001375406e02e2a6660ba66e25200433303d375660c001409c09c2930b0b0b0b0b0b0b0b0a99982e9981e183001300b8a99982ea9982099b89375a60c00446eb4c18008454cc104cdc49bad3060010375a60c001e266e24dd698300079bad306000f1533305d5330413370e66607a6eacc180054dd718300091bae30600114800854cc104cdc398201bab3060015375a60c001e2a66082660866eacc180054c110ccc121c01998278270271bad306000f33304f375c60c00246eb8c1800452002133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010a99982e99b88375a60c00266eb4c1800645261616161630600023060001375406860b600260b400260b200260b000260ae002609a6096609860ae60ac00260aa002609664a6660a80022c264a6660aa002260ae0042c60aa00266460a044a6660ac00220a6264a6660ac60080022660aa002600660b00042600660b000460b0002644646464a6660ae66e1d200000214a0266e3cdd7182d000802982d001182d0009baa323058304e0013057304d001375c60aa0026eb0c154050c154008c154004dd5191829982480098290041828000982780098270009826800982600098211820182098261825800982500098201991198231129998260008b09929998261919baf374e608c00a6e9cc118004c13c0044c13cc1380044c00cc138008c110c138004008dd61825005182500a1bac30493048007303e304800616304800230480013754608a0026074608800260726086002646084608460846084002608200260806080002606c608001a607c002607a00260780026076002607400260600242c607400460740026ea8c0dcc0d801058c0dc008c0dc004dd5181a18198009814804a99981799b87480000084c8c8c8c8c8c8c9265333036001149858c0d80194ccc0cccdc3a400000426464a66606a66e1cdc6800a40702646464646493299981d0008a4c2c60740066eb4004c0e4004c0dc00c58dd7000981b0008b181b001181b0009baa00130320011533302f3370e900100109924ca6660600022930b0b181900118190009baa006533302b3370e900000109919299981699b87371a002901c0991919299981819b89480000044c8c8c8c94ccc0d14cc0b8cdc3800a4000266e1c005203813232325333037337126e340052040132323232323232323232324994ccc1080045261630420033303b23232323200553330433370e900000109919299982299b87371a002901c0991919191924ca6660940022930b18250019bad0013049001304700316375c002608c0022c608c004608c0026ea8004dd60009820800981f8019bad001303e001303c003375a002607600260720062c6eb8004c0e0004c0d801058dc68009bae0013034001303200316375a0026062002605e0062c6eb8004c0b800458c0b8008c0b8004dd500198109129998138008a4000266e00dd6981518021814800980118140009191919299981399b874800800852000132375a6058600c0026054002605400460540026ea80048c8cdd818138009813981300098139baa0012301f22533302500114a02a66604866ebcc09c00400c5288980118130009111999802001240004666600a00490003ad3756002006460046ea40048888cc07c894ccc094004401454ccc090cdd79814981380080309802181418138008980118130008009299980f8008a4000266603c66ebcc08cc084004dd48079bad3022302137566044604200290001119980f0010008018a50223375e6e98008dd3000919801119299980e180280089128008911801001998029299980e19baf00137509000091280089118010018008009180191998011bab001232223002003374c002244a002ae8c88cc054894ccc06c00440404c8ccc014c07cc0780088cc06ccdd81810980f80180080108009801180e0008009111998021119980380280100080100091801911ba63300337560046eac0048c00888dd4198019bad002375a0024446666008006440040040024601e6004002446464466002006004444a66602e00226602a0060042646464a66603266ebc0080044cc060cdd800119804980e803180e80199980411001002980d8020a99980c99b90375c0046eb80044cc060018cccc0208800400cc06c0100144cc06000ccccc02088004018014c06c010c074008c070010c064004894ccc05400840044cccc00c88004c05c008c0580080052210022253330113370e002900008038998020019980280100091198021ba9002374c00244660066ea4008dd4000911980619bb00020010034bd6f7b630119191919002a99980699b87480000084c8c94ccc03ccdc39b8d001480e04c8c8c94ccc048cdc4a4000002264646464a66602ca6602066e1c005200013370e002901c0991919299980c99b89371a00290200991919191919191919191924ca6660480022930b18120019980e919191919002a99981299b87480000084c8c94ccc09ccdc39b8d001480e04c8c8c8c8c926533302c001149858c0b000cdd6800981580098148018b1bae0013028001163028002302800137540026eb0004c08c004c08400cdd68009810000980f0019bad001301d001301b00316375c002603400260300082c6e34004dd7000980b000980a0018b1bad0013013001301100316375c00260200022c602000460200026ea80048c8c8c94ccc030cdc3a40080042601e0022c601e004601e0026ea80048c030dd50009198038008010a512300222533300800110051330063003300a001300230090012323002233002002001230022330020020014bd702ba05734aae7d5d12ba15573caae741"  // Crowd Fund
// console.log("Logging deserialization of UPLC");
// console.log(helios.deserializeUplc(`{"type": "PlutusScriptV1", "cborHex": "${cborHex}"}`))

const crowdfund: NextPage = () => {
  const walletStore = useStoreState((state: any) => state.wallet)
  const [nftList, setNftList] = useState([])
  const [lucid, setLucid] = useState<Lucid>()
  const [script, setScript] = useState<SpendingValidator>()
  const [scriptAddress, setScriptAddress] = useState("")
  const [ariadyTxHash, setAriadyTxHash] = useState("")
  const [efrainTxHash, setEfrainTxHash] = useState("")
  const [inputValue, setInputValue] = useState('');
  const [inputPrivateKey, setInputValuePrivateKey] = useState('');
  const [privAddress,setPrivAddress] = useState<string>('');
  const [txHash,settxHash] = useState<string>('');
  const [firstLine, setFirstLine] = useState<string>('');
  const [readSecretData, setReadSecretData] = useState<any>(null);

  useEffect(() => {
    if (lucid) {
      ;
    } else {
      initLucid(walletStore.name).then((Lucid: Lucid) => { setLucid(Lucid) })
    }
  }, [lucid])

  // data ToyRedeemer = ToyRedeemer{key :: Integer}


  // https://github.com/spacebudz/lucid/blob/main/src/examples/typed_data.ts

  // ghci> PlutusTx.toData datumCrowdVal4aRedeemIn
  // Constr 0 [B "\SO\151\170\ETX<\238\231b\194R\133\205\204\148(qx\240\ESCE\165\133\253\rM\168\&8z",     -- Beneficiary
  //           I 1671159023000,                                                                           -- Deadline
  //          B "\183\EOTq\130\160\ETXT\248\196\205{\SOH\194\250\171#\SO\SOH\210\243:m\207\208\199\129\247\236",  -- Currency Symbol
  //          B "MyCrowdFund",
  //          I 50000000,
  //           I 52000000,
  //           List [Constr 0 [B "\140W>\129\143\&5\168\250\138i93\195\150V\ESC\ACK\"\168\139\191\&4\149,MW,\215",I 50000000]]]
  // data PDat (s :: S) = 
  // PDat 
  //   ( Term 
  //       s 
  //       ( PDataRecord 
  //       '["beneficiary" ':= (PPubKeyHash)
  //       -- '["beneficiary" ':= (PAsData PPubKeyHash)
  //       , "deadline" ':= PPOSIXTime
  //       , "aCurrency" ':= PCurrencySymbol
  //       , "aToken" ':= PTokenName
  //       , "targetAmount" ':= PInteger
  //       , "actualtargetAmountsoFar" ':= PInteger
  //       , "contributorsMap" ':= PBuiltinList (PAsData (PTuple (PPubKeyHash) (PInteger) )) ] ))

// Type definition could be auto generated from on-chain script
  const MyDatumSchema = 
  // Data.Enum([
    Data.Object({ PDat:
      Data.Object({
        beneficiary: Data.Bytes(),
        deadline: Data.Integer(),
        aCurrency: Data.Bytes(),
        aToken: Data.Bytes(),
        targetAmount: Data.Integer(),
        actualtargetAmountsoFar: Data.Integer(),
        contributorsMap: Data.Array(Data.Tuple([Data.Bytes(),Data.Integer()]))
        // contributorsMap: Data.Map(Data.Bytes(), Data.Integer()), // Data.Array(Data.Tuple)
      // colors: Data.Array(Data.Bytes()),
      // description: Data.Nullable(Data.Bytes()),
      })
    });
  // ]);
  type MyDatum = Data.Static<typeof MyDatumSchema>;
  const MyDatum = MyDatumSchema as unknown as MyDatum;


// FOR REDEEM - https://github.com/spacebudz/lucid/blob/main/tests/data.test.ts
// Deno.test("Complex data structure", () => { (section)

// Deno.test("Roundtrip data enum with named args", () => {
//   /*
//     - TypeScript:

//     type MyDatum = "Left" | "Down" | { Right: [string]; } | { Up: { x: bigint; y: bigint;}; }

  const MyRedeemerSchema = Data.Enum([
    Data.Object({ PContribute: 
      Data.Object(Data.Tuple([Data.Bytes(), Data.Integer()]) ) }),
    Data.Literal("Pclose"),
  ]);
  type MyRedeemer = Data.Static<typeof MyRedeemerSchema>;
  const MyRedeemer = MyRedeemerSchema as unknown as MyRedeemer;

  // const MyRedeemerContributeSchema = {
  //   tag: 'contribution', Data.Tuple([ Data.Bytes(), Data.Integer()])
  // };
  // type MyRedeemerContribute = Data.Static<typeof MyRedeemerContributeSchema>;
  // const MyRedeemerContribute = MyRedeemerContributeSchema as unknown as MyRedeemerContribute;

  const sDeposit = async () => {
    if (lucid) {
      // const sValCbor = "589b5899010000222323232325333573466e1d200200215333573466ebcd5d0991aab9e375400200e6ae84c8d55cf1baa00100614985854cd5ce2481445061747465726e206d61746368206661696c75726520696e2027646f2720626c6f636b206174207372632f536d616c6c56616c696461746f722e68733a35333a352d3432001635573c0046aae74004dd51aba135744002646aae78dd50008009"
      // const sValCborSmallValidator = "582858260100003232322225333573466ebcc010c014008c010c01400c526165742460046ea800555cf1"  // small validator
      const sValCbor = "590a5f590a5c01000032323232323232323232323232323232323232323232323232323232323232323232323232323232323222232323232323232323232323253330343370e90010010991919299981b99b87480080084c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc114cdc3a4004004264646464646464646464646464a6660a466e1d20000021613232323232323232323232533305d3370e90000010a99982ea9982099b8733303d375660c002a6eb8c180048dd71830008a40042a6608266e1cc100dd5983000a9bad306000f153304133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010998219bab3060015304433304870066609e09c09c6eb4c18003cccc13cdd718300091bae30600114800854ccc1754cc104cdc399981e9bab306000a375c60c000e6eb8c180019200213304333304f04e04e3039375860c060be0086088666090e00ccc13c138138c0e4dd61830182f807999827827027181d01b8a99982e99821982219982438033304f04e04e375a60c001e66609e09c09c607406e66609e09c09c6eb4c18001054ccc1754cc104cdd79830004983000a0a9982099baf3060008306001315330413375e60c000a60c00202a6608266ebcc18001cc1800484cdd7983000318300088a99982e99821982219982438033304f04e04e303a037375660c002a6eacc18002854ccc174cdd7983000b18300058a99982e9981e191919299983019b87480000084c8c198c0fc004c18c00453011e581c0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a0030630023063001375406e02e2a6660ba66e25200433303d375660c001409c09c2930b0b0b0b0b0b0b0b0a99982e9981e183001300b8a99982ea9982099b89375a60c00446eb4c18008454cc104cdc49bad3060010375a60c001e266e24dd698300079bad306000f1533305d5330413370e66607a6eacc180054dd718300091bae30600114800854cc104cdc398201bab3060015375a60c001e2a66082660866eacc180054c110ccc121c01998278270271bad306000f33304f375c60c00246eb8c1800452002133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010a99982e99b88375a60c00266eb4c1800645261616161630600023060001375406860b600260b400260b200260b000260ae002609a6096609860ae60ac00260aa002609664a6660a80022c264a6660aa002260ae0042c60aa00266460a044a6660ac00220a6264a6660ac60080022660aa002600660b00042600660b000460b0002644646464a6660ae66e1d200000214a0266e3cdd7182d000802982d001182d0009baa323058304e0013057304d001375c60aa0026eb0c154050c154008c154004dd5191829982480098290041828000982780098270009826800982600098211820182098261825800982500098201991198231129998260008b09929998261919baf374e608c00a6e9cc118004c13c0044c13cc1380044c00cc138008c110c138004008dd61825005182500a1bac30493048007303e304800616304800230480013754608a0026074608800260726086002646084608460846084002608200260806080002606c608001a607c002607a00260780026076002607400260600242c607400460740026ea8c0dcc0d801058c0dc008c0dc004dd5181a18198009814804a99981799b87480000084c8c8c8c8c8c8c9265333036001149858c0d80194ccc0cccdc3a400000426464a66606a66e1cdc6800a40702646464646493299981d0008a4c2c60740066eb4004c0e4004c0dc00c58dd7000981b0008b181b001181b0009baa00130320011533302f3370e900100109924ca6660600022930b0b181900118190009baa006533302b3370e900000109919299981699b87371a002901c0991919299981819b89480000044c8c8c8c94ccc0d14cc0b8cdc3800a4000266e1c005203813232325333037337126e340052040132323232323232323232324994ccc1080045261630420033303b23232323200553330433370e900000109919299982299b87371a002901c0991919191924ca6660940022930b18250019bad0013049001304700316375c002608c0022c608c004608c0026ea8004dd60009820800981f8019bad001303e001303c003375a002607600260720062c6eb8004c0e0004c0d801058dc68009bae0013034001303200316375a0026062002605e0062c6eb8004c0b800458c0b8008c0b8004dd500198109129998138008a4000266e00dd6981518021814800980118140009191919299981399b874800800852000132375a6058600c0026054002605400460540026ea80048c8cdd818138009813981300098139baa0012301f22533302500114a02a66604866ebcc09c00400c5288980118130009111999802001240004666600a00490003ad3756002006460046ea40048888cc07c894ccc094004401454ccc090cdd79814981380080309802181418138008980118130008009299980f8008a4000266603c66ebcc08cc084004dd48079bad3022302137566044604200290001119980f0010008018a50223375e6e98008dd3000919801119299980e180280089128008911801001998029299980e19baf00137509000091280089118010018008009180191998011bab001232223002003374c002244a002ae8c88cc054894ccc06c00440404c8ccc014c07cc0780088cc06ccdd81810980f80180080108009801180e0008009111998021119980380280100080100091801911ba63300337560046eac0048c00888dd4198019bad002375a0024446666008006440040040024601e6004002446464466002006004444a66602e00226602a0060042646464a66603266ebc0080044cc060cdd800119804980e803180e80199980411001002980d8020a99980c99b90375c0046eb80044cc060018cccc0208800400cc06c0100144cc06000ccccc02088004018014c06c010c074008c070010c064004894ccc05400840044cccc00c88004c05c008c0580080052210022253330113370e002900008038998020019980280100091198021ba9002374c00244660066ea4008dd4000911980619bb00020010034bd6f7b630119191919002a99980699b87480000084c8c94ccc03ccdc39b8d001480e04c8c8c94ccc048cdc4a4000002264646464a66602ca6602066e1c005200013370e002901c0991919299980c99b89371a00290200991919191919191919191924ca6660480022930b18120019980e919191919002a99981299b87480000084c8c94ccc09ccdc39b8d001480e04c8c8c8c8c926533302c001149858c0b000cdd6800981580098148018b1bae0013028001163028002302800137540026eb0004c08c004c08400cdd68009810000980f0019bad001301d001301b00316375c002603400260300082c6e34004dd7000980b000980a0018b1bad0013013001301100316375c00260200022c602000460200026ea80048c8c8c94ccc030cdc3a40080042601e0022c601e004601e0026ea80048c030dd50009198038008010a512300222533300800110051330063003300a001300230090012323002233002002001230022330020020014bd702ba05734aae7d5d12ba15573caae741"  // Crowd Fund
      const sValidator : SpendingValidator = {
        type: "PlutusV2",
        script: sValCbor
      }
    // https://github.com/spacebudz/lucid/blob/main/src/examples/typed_data.ts
      // to print at terminal too
      // const fs = require('fs');
      // const path = require('path');
      // const logFile = path.join(process.cwd(), 'npm_run_dev.log');
      // const writeLog = (message) => {
      //   fs.writeFileSync(logFile, message + '\n', { encoding: 'utf-8' });
      // };
      // writeLog('This message was printed to the npm run dev window.');
      const sValAddress = lucid.utils.validatorToAddress(sValidator)


      const { paymentCredential } = lucid.utils.getAddressDetails(
        await lucid.wallet.address(),
      );      
      console.log("Payment pub key hash = ", paymentCredential?.hash!)
      // const datum = Data.to<PasswordDatum>({password: BigInt(24)}, PasswordDatum)
      // const datum : MyDatum = 
      //   { PDat:
      //     {
      //       // beneficiary: fromText("0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a"),    // pubkey hash
      //       beneficiary: paymentCredential?.hash!,    // pubkey hash
      //       deadline: (lucid.utils.unixTimeToSlot(Date.now() + 1000000)), 
      //       // lucid.utils.unixTimeToSlot(Date.now() + 1000000),     need to test this out.
      //       aCurrency: fromText("45cd7f7a6cd2ada53dbbc4ca4b1342392c99f3276cb8f19574c11a99"),
      //       // aToken: fromText("CrowdFundingToken"),
      //       aToken: fromText("MyCrowdFund"),
      //       targetAmount: 5000000n,          // 5 Ada
      //       actualtargetAmountsoFar: 5555n,
      //       contributorsMap: [[fromText(paymentCredential?.hash!), 555n]]
      //     }
      //   }
      // Initial first deposit
      const deadlineCalc = (lucid.utils.unixTimeToSlot(Date.now() + 1000000))

      const policy1 : PolicyId = "6fcf234bee205dc56ad308ea5882eb59045136056de323daf221f9de"
      console.log("deadline = ", deadlineCalc)



      const datumInit : MyDatum = 
        { PDat:
          {
            // beneficiary: fromText("0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a"),    // pubkey hash
            beneficiary: paymentCredential?.hash!,    // pubkey hash
            deadline: BigInt(deadlineCalc),
            // deadline: 35693597n, 
            // aCurrency: fromText("45cd7f7a6cd2ada53dbbc4ca4b1342392c99f3276cb8f19574c11a99"),
            aCurrency: policy1,
            // aCurrency: "6fcf234bee205dc56ad308ea5882eb59045136056de323daf221f9de",
            aToken: fromText("CrowdFundingToken"),
            // aToken: "MyCrowdFund",
            targetAmount: 30000000n,                // 30 Ada Target
            actualtargetAmountsoFar: 2000000n,      // Min 2 Ada when we first deposit
            contributorsMap: [[paymentCredential?.hash!,2000000n]]            // Initial map is blank
          }
        };
      // console.log("Datum = ", datumInit)
      console.log("policy1 = ", policy1)
      console.log("datumInit = ", datumInit)

      const datumData = Data.to<MyDatum>( datumInit, MyDatum)
      console.log("Datum as Data = ", datumData)
      
      console.log("PayToScript Address: ", sValAddress )
      
      const utxos = await lucid.wallet.getUtxos()
      const tx = await lucid.newTx()
        .payToContract(sValAddress, {inline: Data.to(datumInit, MyDatum)}, {lovelace: BigInt(2000000), [policy1 + fromText("MyCrowdFund")]: 1n })
        // .payToAddress("addr_test...", { [policyId + fromText(assetName)]: 10n })
        .complete();

        console.log("Went into sDeposit module:After payto ")
        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log("Lock Test TxHash: " + txHash)
        settxHash(txHash);
        return txHash;
    
    }
  
  }   // End sdeposit


// spend

  const sSpend = async () => {
    if (lucid) {
      //const sValCbor = "582858260100003232322225333573466ebcc010c014008c010c01400c526165742460046ea800555cf1"
      const sValCbor = "590a5f590a5c01000032323232323232323232323232323232323232323232323232323232323232323232323232323232323222232323232323232323232323253330343370e90010010991919299981b99b87480080084c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc114cdc3a4004004264646464646464646464646464a6660a466e1d20000021613232323232323232323232533305d3370e90000010a99982ea9982099b8733303d375660c002a6eb8c180048dd71830008a40042a6608266e1cc100dd5983000a9bad306000f153304133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010998219bab3060015304433304870066609e09c09c6eb4c18003cccc13cdd718300091bae30600114800854ccc1754cc104cdc399981e9bab306000a375c60c000e6eb8c180019200213304333304f04e04e3039375860c060be0086088666090e00ccc13c138138c0e4dd61830182f807999827827027181d01b8a99982e99821982219982438033304f04e04e375a60c001e66609e09c09c607406e66609e09c09c6eb4c18001054ccc1754cc104cdd79830004983000a0a9982099baf3060008306001315330413375e60c000a60c00202a6608266ebcc18001cc1800484cdd7983000318300088a99982e99821982219982438033304f04e04e303a037375660c002a6eacc18002854ccc174cdd7983000b18300058a99982e9981e191919299983019b87480000084c8c198c0fc004c18c00453011e581c0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a0030630023063001375406e02e2a6660ba66e25200433303d375660c001409c09c2930b0b0b0b0b0b0b0b0a99982e9981e183001300b8a99982ea9982099b89375a60c00446eb4c18008454cc104cdc49bad3060010375a60c001e266e24dd698300079bad306000f1533305d5330413370e66607a6eacc180054dd718300091bae30600114800854cc104cdc398201bab3060015375a60c001e2a66082660866eacc180054c110ccc121c01998278270271bad306000f33304f375c60c00246eb8c1800452002133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010a99982e99b88375a60c00266eb4c1800645261616161630600023060001375406860b600260b400260b200260b000260ae002609a6096609860ae60ac00260aa002609664a6660a80022c264a6660aa002260ae0042c60aa00266460a044a6660ac00220a6264a6660ac60080022660aa002600660b00042600660b000460b0002644646464a6660ae66e1d200000214a0266e3cdd7182d000802982d001182d0009baa323058304e0013057304d001375c60aa0026eb0c154050c154008c154004dd5191829982480098290041828000982780098270009826800982600098211820182098261825800982500098201991198231129998260008b09929998261919baf374e608c00a6e9cc118004c13c0044c13cc1380044c00cc138008c110c138004008dd61825005182500a1bac30493048007303e304800616304800230480013754608a0026074608800260726086002646084608460846084002608200260806080002606c608001a607c002607a00260780026076002607400260600242c607400460740026ea8c0dcc0d801058c0dc008c0dc004dd5181a18198009814804a99981799b87480000084c8c8c8c8c8c8c9265333036001149858c0d80194ccc0cccdc3a400000426464a66606a66e1cdc6800a40702646464646493299981d0008a4c2c60740066eb4004c0e4004c0dc00c58dd7000981b0008b181b001181b0009baa00130320011533302f3370e900100109924ca6660600022930b0b181900118190009baa006533302b3370e900000109919299981699b87371a002901c0991919299981819b89480000044c8c8c8c94ccc0d14cc0b8cdc3800a4000266e1c005203813232325333037337126e340052040132323232323232323232324994ccc1080045261630420033303b23232323200553330433370e900000109919299982299b87371a002901c0991919191924ca6660940022930b18250019bad0013049001304700316375c002608c0022c608c004608c0026ea8004dd60009820800981f8019bad001303e001303c003375a002607600260720062c6eb8004c0e0004c0d801058dc68009bae0013034001303200316375a0026062002605e0062c6eb8004c0b800458c0b8008c0b8004dd500198109129998138008a4000266e00dd6981518021814800980118140009191919299981399b874800800852000132375a6058600c0026054002605400460540026ea80048c8cdd818138009813981300098139baa0012301f22533302500114a02a66604866ebcc09c00400c5288980118130009111999802001240004666600a00490003ad3756002006460046ea40048888cc07c894ccc094004401454ccc090cdd79814981380080309802181418138008980118130008009299980f8008a4000266603c66ebcc08cc084004dd48079bad3022302137566044604200290001119980f0010008018a50223375e6e98008dd3000919801119299980e180280089128008911801001998029299980e19baf00137509000091280089118010018008009180191998011bab001232223002003374c002244a002ae8c88cc054894ccc06c00440404c8ccc014c07cc0780088cc06ccdd81810980f80180080108009801180e0008009111998021119980380280100080100091801911ba63300337560046eac0048c00888dd4198019bad002375a0024446666008006440040040024601e6004002446464466002006004444a66602e00226602a0060042646464a66603266ebc0080044cc060cdd800119804980e803180e80199980411001002980d8020a99980c99b90375c0046eb80044cc060018cccc0208800400cc06c0100144cc06000ccccc02088004018014c06c010c074008c070010c064004894ccc05400840044cccc00c88004c05c008c0580080052210022253330113370e002900008038998020019980280100091198021ba9002374c00244660066ea4008dd4000911980619bb00020010034bd6f7b630119191919002a99980699b87480000084c8c94ccc03ccdc39b8d001480e04c8c8c94ccc048cdc4a4000002264646464a66602ca6602066e1c005200013370e002901c0991919299980c99b89371a00290200991919191919191919191924ca6660480022930b18120019980e919191919002a99981299b87480000084c8c94ccc09ccdc39b8d001480e04c8c8c8c8c926533302c001149858c0b000cdd6800981580098148018b1bae0013028001163028002302800137540026eb0004c08c004c08400cdd68009810000980f0019bad001301d001301b00316375c002603400260300082c6e34004dd7000980b000980a0018b1bad0013013001301100316375c00260200022c602000460200026ea80048c8c8c94ccc030cdc3a40080042601e0022c601e004601e0026ea80048c030dd50009198038008010a512300222533300800110051330063003300a001300230090012323002233002002001230022330020020014bd702ba05734aae7d5d12ba15573caae741"  // Crowd Fund
      const sValidator : SpendingValidator = 
        {type:"PlutusV2", script: sValCbor}
      
      const sValAddress = lucid.utils.validatorToAddress(sValidator)
      const valUtxos = await lucid.utxosAt(sValAddress)
      const redeemer = Data.to(
        new Constr(0, [BigInt(24)])
      )

      let found = undefined

      for ( let i=0; i<valUtxos.length; i++ ) {
        const curr = valUtxos[i]
          if (!curr.datum) {
            if (!curr.datumHash) {
              continue;
            }
            curr.datum = await lucid.datumOf(curr)
          }
        const pDatum : Constr <Data> = Data.from(curr.datum!)

        if (pDatum.fields[0] === BigInt(24)) {
          found = curr
        } 
      }

      if (!found) throw new Error("Naughty Datum")

      const utxos = await lucid.wallet.getUtxos();
      
      const tx = await lucid
        .newTx()
        .attachSpendingValidator(sValidator)
        .collectFrom([found], redeemer)
        .complete();

        const signedTx = await tx.sign().complete();
        const txHash = await signedTx.submit();
        console.log("Collect Test TxHash: " + txHash)
        return txHash;
    }
  }

// spend & deposit
    // schema Datum
  const PasswordDatum = Data.Object({
        password: Data.Integer()
      })
  type PasswordDatum = Data.Static<typeof PasswordDatum>
  const sSpendAndDeposit = async () => {
        if (lucid) {
          // const sValCbor = "582858260100003232322225333573466ebcc010c014008c010c01400c526165742460046ea800555cf1"
          const sValCbor = "590a5f590a5c01000032323232323232323232323232323232323232323232323232323232323232323232323232323232323222232323232323232323232323253330343370e90010010991919299981b99b87480080084c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc114cdc3a4004004264646464646464646464646464a6660a466e1d20000021613232323232323232323232533305d3370e90000010a99982ea9982099b8733303d375660c002a6eb8c180048dd71830008a40042a6608266e1cc100dd5983000a9bad306000f153304133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010998219bab3060015304433304870066609e09c09c6eb4c18003cccc13cdd718300091bae30600114800854ccc1754cc104cdc399981e9bab306000a375c60c000e6eb8c180019200213304333304f04e04e3039375860c060be0086088666090e00ccc13c138138c0e4dd61830182f807999827827027181d01b8a99982e99821982219982438033304f04e04e375a60c001e66609e09c09c607406e66609e09c09c6eb4c18001054ccc1754cc104cdd79830004983000a0a9982099baf3060008306001315330413375e60c000a60c00202a6608266ebcc18001cc1800484cdd7983000318300088a99982e99821982219982438033304f04e04e303a037375660c002a6eacc18002854ccc174cdd7983000b18300058a99982e9981e191919299983019b87480000084c8c198c0fc004c18c00453011e581c0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a0030630023063001375406e02e2a6660ba66e25200433303d375660c001409c09c2930b0b0b0b0b0b0b0b0a99982e9981e183001300b8a99982ea9982099b89375a60c00446eb4c18008454cc104cdc49bad3060010375a60c001e266e24dd698300079bad306000f1533305d5330413370e66607a6eacc180054dd718300091bae30600114800854cc104cdc398201bab3060015375a60c001e2a66082660866eacc180054c110ccc121c01998278270271bad306000f33304f375c60c00246eb8c1800452002133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010a99982e99b88375a60c00266eb4c1800645261616161630600023060001375406860b600260b400260b200260b000260ae002609a6096609860ae60ac00260aa002609664a6660a80022c264a6660aa002260ae0042c60aa00266460a044a6660ac00220a6264a6660ac60080022660aa002600660b00042600660b000460b0002644646464a6660ae66e1d200000214a0266e3cdd7182d000802982d001182d0009baa323058304e0013057304d001375c60aa0026eb0c154050c154008c154004dd5191829982480098290041828000982780098270009826800982600098211820182098261825800982500098201991198231129998260008b09929998261919baf374e608c00a6e9cc118004c13c0044c13cc1380044c00cc138008c110c138004008dd61825005182500a1bac30493048007303e304800616304800230480013754608a0026074608800260726086002646084608460846084002608200260806080002606c608001a607c002607a00260780026076002607400260600242c607400460740026ea8c0dcc0d801058c0dc008c0dc004dd5181a18198009814804a99981799b87480000084c8c8c8c8c8c8c9265333036001149858c0d80194ccc0cccdc3a400000426464a66606a66e1cdc6800a40702646464646493299981d0008a4c2c60740066eb4004c0e4004c0dc00c58dd7000981b0008b181b001181b0009baa00130320011533302f3370e900100109924ca6660600022930b0b181900118190009baa006533302b3370e900000109919299981699b87371a002901c0991919299981819b89480000044c8c8c8c94ccc0d14cc0b8cdc3800a4000266e1c005203813232325333037337126e340052040132323232323232323232324994ccc1080045261630420033303b23232323200553330433370e900000109919299982299b87371a002901c0991919191924ca6660940022930b18250019bad0013049001304700316375c002608c0022c608c004608c0026ea8004dd60009820800981f8019bad001303e001303c003375a002607600260720062c6eb8004c0e0004c0d801058dc68009bae0013034001303200316375a0026062002605e0062c6eb8004c0b800458c0b8008c0b8004dd500198109129998138008a4000266e00dd6981518021814800980118140009191919299981399b874800800852000132375a6058600c0026054002605400460540026ea80048c8cdd818138009813981300098139baa0012301f22533302500114a02a66604866ebcc09c00400c5288980118130009111999802001240004666600a00490003ad3756002006460046ea40048888cc07c894ccc094004401454ccc090cdd79814981380080309802181418138008980118130008009299980f8008a4000266603c66ebcc08cc084004dd48079bad3022302137566044604200290001119980f0010008018a50223375e6e98008dd3000919801119299980e180280089128008911801001998029299980e19baf00137509000091280089118010018008009180191998011bab001232223002003374c002244a002ae8c88cc054894ccc06c00440404c8ccc014c07cc0780088cc06ccdd81810980f80180080108009801180e0008009111998021119980380280100080100091801911ba63300337560046eac0048c00888dd4198019bad002375a0024446666008006440040040024601e6004002446464466002006004444a66602e00226602a0060042646464a66603266ebc0080044cc060cdd800119804980e803180e80199980411001002980d8020a99980c99b90375c0046eb80044cc060018cccc0208800400cc06c0100144cc06000ccccc02088004018014c06c010c074008c070010c064004894ccc05400840044cccc00c88004c05c008c0580080052210022253330113370e002900008038998020019980280100091198021ba9002374c00244660066ea4008dd4000911980619bb00020010034bd6f7b630119191919002a99980699b87480000084c8c94ccc03ccdc39b8d001480e04c8c8c94ccc048cdc4a4000002264646464a66602ca6602066e1c005200013370e002901c0991919299980c99b89371a00290200991919191919191919191924ca6660480022930b18120019980e919191919002a99981299b87480000084c8c94ccc09ccdc39b8d001480e04c8c8c8c8c926533302c001149858c0b000cdd6800981580098148018b1bae0013028001163028002302800137540026eb0004c08c004c08400cdd68009810000980f0019bad001301d001301b00316375c002603400260300082c6e34004dd7000980b000980a0018b1bad0013013001301100316375c00260200022c602000460200026ea80048c8c8c94ccc030cdc3a40080042601e0022c601e004601e0026ea80048c030dd50009198038008010a512300222533300800110051330063003300a001300230090012323002233002002001230022330020020014bd702ba05734aae7d5d12ba15573caae741"  // Crowd Fund
          const sValidator : SpendingValidator = 
            {type:"PlutusV2", script: sValCbor}
          const sValAddress = lucid.utils.validatorToAddress(sValidator)
          const valUtxos = await lucid.utxosAt(sValAddress)

          // user Contributor wallet to contribute
          const seed = "year gold install glide mirror useful assault very bid leader shuffle soon hamster betray raven entry very brick leave federal aim dress suit suit"
          lucid.selectWalletFromSeed(seed);

//        this is what is already at the script
          const datum1 : MyDatum = 
            { Dat: 
              {
                // beneficiary: fromText("0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a"),    // pubkey hash
                beneficiary: paymentCredential?.hash!,    // pubkey hash
                deadline: BigInt(deadlineCalc),
                // deadline: 5555n, 
                // aCurrency: fromText("45cd7f7a6cd2ada53dbbc4ca4b1342392c99f3276cb8f19574c11a99"),
                aCurrency: policy1,
                // aToken: fromText("CrowdFundingToken"),
                aToken: fromText("MyCrowdFund"),
                targetAmount: 30000000n,                // 30 Ada Target
                actualtargetAmountsoFar: 2000000n,      // Min 2 Ada when we first deposit
                contributorsMap: []             // Initial map is blank
              }
            }
          // Datum we want to deposit
          const datum2 : MyDatum = 
            { Dat: 
              {
                // beneficiary: fromText("0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a"),    // pubkey hash
                beneficiary: fromText("e9efb9bb50fc3531da4955a7f4d06b22951cbcb373368f978640c3f4"),    // pubkey hash
                deadline: BigInt(35231522),     // what's already on the UTXO - needs to be same.
                // deadline: 5555n, 
                // aCurrency: fromText("45cd7f7a6cd2ada53dbbc4ca4b1342392c99f3276cb8f19574c11a99"),
                aCurrency: fromText("e0d3120855499e55ef6994a68b2180d265724d62341e55be11826bc4"),
                // aToken: fromText("CrowdFundingToken"),
                aToken: fromText("MyCrowdFund"),
                targetAmount: 30000000n,                // 30 Ada Target
                actualtargetAmountsoFar: 22000000n,      // Min 2 Ada when we first deposit + this contribution 20 Ada
                contributorsMap: [[paymentCredential?.hash!, 20000000n]]
                // contributorsMap: new Map([])             // Initial map is blank
              }          
            };
          let found = undefined
    
          for ( let i=0; i<valUtxos.length; i++ ) {
            const curr = valUtxos[i]

            if (!curr.datum) {
              if (!curr.datumHash) {
                continue;
              }
              curr.datum = await lucid.datumOf(curr)
            }
                                            
            const pDatum = Data.from<PasswordDatum>(curr.datum!, PasswordDatum)
    
            // if (pDatum.password == BigInt(25)) {
            if (pDatum.password == BigInt(24)) {
              found = curr
            } 
          }
    
          if (!found) throw new Error("Naughty Datum")
    
          const utxos = await lucid.wallet.getUtxos();
          
          const tx = await lucid
            .newTx()
            .attachSpendingValidator(sValidator)
            .collectFrom([found], redeemer)
            .payToContract(sValAddress, {inline: datum}, {lovelace: BigInt(1000000)})
            .complete();
    
            const signedTx = await tx.sign().complete();
            const txHash = await signedTx.submit();
            console.log("Collect Test TxHash: " + txHash)
            return txHash;
    
        }
      }



// this function is only a test to show script address calculated thats all;
  const sPrintScriptAddress = async () => { 
        if (lucid) {
          // const sValCbor = "589b5899010000222323232325333573466e1d200200215333573466ebcd5d0991aab9e375400200e6ae84c8d55cf1baa00100614985854cd5ce2481445061747465726e206d61746368206661696c75726520696e2027646f2720626c6f636b206174207372632f536d616c6c56616c696461746f722e68733a35333a352d3432001635573c0046aae74004dd51aba135744002646aae78dd50008009"
          // const sValCborSmallValidator = "582858260100003232322225333573466ebcc010c014008c010c01400c526165742460046ea800555cf1"  // small validator
          const sValCborCrowdFund = "590a5f590a5c01000032323232323232323232323232323232323232323232323232323232323232323232323232323232323222232323232323232323232323253330343370e90010010991919299981b99b87480080084c8c8c8c8c8c8c8c8c8c8c8c8c8c94ccc114cdc3a4004004264646464646464646464646464a6660a466e1d20000021613232323232323232323232533305d3370e90000010a99982ea9982099b8733303d375660c002a6eb8c180048dd71830008a40042a6608266e1cc100dd5983000a9bad306000f153304133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010998219bab3060015304433304870066609e09c09c6eb4c18003cccc13cdd718300091bae30600114800854ccc1754cc104cdc399981e9bab306000a375c60c000e6eb8c180019200213304333304f04e04e3039375860c060be0086088666090e00ccc13c138138c0e4dd61830182f807999827827027181d01b8a99982e99821982219982438033304f04e04e375a60c001e66609e09c09c607406e66609e09c09c6eb4c18001054ccc1754cc104cdd79830004983000a0a9982099baf3060008306001315330413375e60c000a60c00202a6608266ebcc18001cc1800484cdd7983000318300088a99982e99821982219982438033304f04e04e303a037375660c002a6eacc18002854ccc174cdd7983000b18300058a99982e9981e191919299983019b87480000084c8c198c0fc004c18c00453011e581c0e97aa033ceee762c25285cdcc94287178f01b45a585fd0d4da8387a0030630023063001375406e02e2a6660ba66e25200433303d375660c001409c09c2930b0b0b0b0b0b0b0b0a99982e9981e183001300b8a99982ea9982099b89375a60c00446eb4c18008454cc104cdc49bad3060010375a60c001e266e24dd698300079bad306000f1533305d5330413370e66607a6eacc180054dd718300091bae30600114800854cc104cdc398201bab3060015375a60c001e2a66082660866eacc180054c110ccc121c01998278270271bad306000f33304f375c60c00246eb8c1800452002133043375660c002a6088666090e00ccc13c138138dd698300079998279bae3060012375c60c002290010a99982e99b88375a60c00266eb4c1800645261616161630600023060001375406860b600260b400260b200260b000260ae002609a6096609860ae60ac00260aa002609664a6660a80022c264a6660aa002260ae0042c60aa00266460a044a6660ac00220a6264a6660ac60080022660aa002600660b00042600660b000460b0002644646464a6660ae66e1d200000214a0266e3cdd7182d000802982d001182d0009baa323058304e0013057304d001375c60aa0026eb0c154050c154008c154004dd5191829982480098290041828000982780098270009826800982600098211820182098261825800982500098201991198231129998260008b09929998261919baf374e608c00a6e9cc118004c13c0044c13cc1380044c00cc138008c110c138004008dd61825005182500a1bac30493048007303e304800616304800230480013754608a0026074608800260726086002646084608460846084002608200260806080002606c608001a607c002607a00260780026076002607400260600242c607400460740026ea8c0dcc0d801058c0dc008c0dc004dd5181a18198009814804a99981799b87480000084c8c8c8c8c8c8c9265333036001149858c0d80194ccc0cccdc3a400000426464a66606a66e1cdc6800a40702646464646493299981d0008a4c2c60740066eb4004c0e4004c0dc00c58dd7000981b0008b181b001181b0009baa00130320011533302f3370e900100109924ca6660600022930b0b181900118190009baa006533302b3370e900000109919299981699b87371a002901c0991919299981819b89480000044c8c8c8c94ccc0d14cc0b8cdc3800a4000266e1c005203813232325333037337126e340052040132323232323232323232324994ccc1080045261630420033303b23232323200553330433370e900000109919299982299b87371a002901c0991919191924ca6660940022930b18250019bad0013049001304700316375c002608c0022c608c004608c0026ea8004dd60009820800981f8019bad001303e001303c003375a002607600260720062c6eb8004c0e0004c0d801058dc68009bae0013034001303200316375a0026062002605e0062c6eb8004c0b800458c0b8008c0b8004dd500198109129998138008a4000266e00dd6981518021814800980118140009191919299981399b874800800852000132375a6058600c0026054002605400460540026ea80048c8cdd818138009813981300098139baa0012301f22533302500114a02a66604866ebcc09c00400c5288980118130009111999802001240004666600a00490003ad3756002006460046ea40048888cc07c894ccc094004401454ccc090cdd79814981380080309802181418138008980118130008009299980f8008a4000266603c66ebcc08cc084004dd48079bad3022302137566044604200290001119980f0010008018a50223375e6e98008dd3000919801119299980e180280089128008911801001998029299980e19baf00137509000091280089118010018008009180191998011bab001232223002003374c002244a002ae8c88cc054894ccc06c00440404c8ccc014c07cc0780088cc06ccdd81810980f80180080108009801180e0008009111998021119980380280100080100091801911ba63300337560046eac0048c00888dd4198019bad002375a0024446666008006440040040024601e6004002446464466002006004444a66602e00226602a0060042646464a66603266ebc0080044cc060cdd800119804980e803180e80199980411001002980d8020a99980c99b90375c0046eb80044cc060018cccc0208800400cc06c0100144cc06000ccccc02088004018014c06c010c074008c070010c064004894ccc05400840044cccc00c88004c05c008c0580080052210022253330113370e002900008038998020019980280100091198021ba9002374c00244660066ea4008dd4000911980619bb00020010034bd6f7b630119191919002a99980699b87480000084c8c94ccc03ccdc39b8d001480e04c8c8c94ccc048cdc4a4000002264646464a66602ca6602066e1c005200013370e002901c0991919299980c99b89371a00290200991919191919191919191924ca6660480022930b18120019980e919191919002a99981299b87480000084c8c94ccc09ccdc39b8d001480e04c8c8c8c8c926533302c001149858c0b000cdd6800981580098148018b1bae0013028001163028002302800137540026eb0004c08c004c08400cdd68009810000980f0019bad001301d001301b00316375c002603400260300082c6e34004dd7000980b000980a0018b1bad0013013001301100316375c00260200022c602000460200026ea80048c8c8c94ccc030cdc3a40080042601e0022c601e004601e0026ea80048c030dd50009198038008010a512300222533300800110051330063003300a001300230090012323002233002002001230022330020020014bd702ba05734aae7d5d12ba15573caae741"  // Crowd Fund
          const sValidator : SpendingValidator = {
            type: "PlutusV2",
            script: sValCborCrowdFund
          }
        
          // to print at terminal too
          // const fs = require('fs');
          // const path = require('path');
          // const logFile = path.join(process.cwd(), 'npm_run_dev.log');
          // const writeLog = (message) => {
          //   fs.writeFileSync(logFile, message + '\n', { encoding: 'utf-8' });
          // };
          // writeLog('This message was printed to the npm run dev window.');
    
    
          const sValAddress = lucid.utils.validatorToAddress(sValidator)
          
          // const datum = Data.to(
          //   new Constr(0, [BigInt(24)])
          // )
          console.log("PayToScript Address from New show address button: ", sValAddress )

        
        }
      }    // End sPrintScriptAddress


///////////////////////////////////////////////////////////////////////
/////////////            MINT NFT 



// const sPrintScriptAddress = async () => { 
  const sMintCrowdFundToken = async () => { 
    if (lucid) {

        const { paymentCredential } = lucid.utils.getAddressDetails(
            await lucid.wallet.address(),
        );
        // First we need to create a minting policy for the assets we want to mint. 
        //    we utilize a native script time-locking policy with our wallet as required signer:    

        const mintingPolicy = lucid.utils.nativeScriptFromJson(
          {
            type: "all",
            scripts: [
              { type: "sig", keyHash: paymentCredential.hash },
              {
                type: "before",
                slot: lucid.utils.unixTimeToSlot(Date.now() + 1000000),   // for testing minting 10
              },
            ],
          },
        );    // End minting policy 
            
      

        // Next we derive the policy id from the minting policy script:
        const policyId = lucid.utils.mintingPolicyToId(mintingPolicy);

        // const unit = policyId + fromText("CrowdFundingToken");
        const unit = policyId + fromText("MyCrowdFund");
        console.log("Policy ID for our CrowdFunding Token: ", policyId )
        const tx = await lucid.newTx()
          .mintAssets({ [unit]: 10n })    // Mint 10 for testing
          .validTo(Date.now() + 200000)
          .attachMintingPolicy(mintingPolicy)
          .complete();

        const signedTx = await tx.sign().complete();

        const txHash = await signedTx.submit();
        console.log("Collect Test TxHash: " + txHash)
        return txHash;
    }
  }  // End sMintCrowdFundToken

     
  const createSeedPhrase = async () => { 
    if (lucid) {
      const seed = lucid.utils.generateSeedPhrase();
      console.log("Seed phrase created: ", seed)
      lucid.selectWalletFromSeed(seed);
    }
  }   // End createSeedPhrase


  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(event.target.value);
  };


  const handleButtonSDeposit = async () => {
    try {
      await sDeposit(); 
    } catch (error) {
      // Handle any errors that might occur during the asynchronous operation
      console.error('Error in SDeposit CrowdFund:', error);
    }
  };  

  const handleButtonClickSeedInfo = async () => {
    try {
      await infoFromSeed(inputValue); // Use 'await' to wait for the asynchronous function to complete
    } catch (error) {
      // Handle any errors that might occur during the asynchronous operation
      console.error('Error in infoFromSeed:', error);
    }
  };  

  
  const infoFromSeed = async (seed: string) => { 
    // This test routine i am trying to get address and credentials from Seed from a secret file.
    // Also getting from Nami connected wallet too.

    // const seed = lucid.utils.generateSeedPhrase();
    // console.log("Seed phrase created: ", seed)
    if (lucid) {

      // First lets bring Nami and get its PaymentCredential Hash
      const { paymentCredential: namiPaymentCredential } = lucid.utils.getAddressDetails(
        await lucid.wallet.address(),
      );  
      const namiCredHash = namiPaymentCredential?.hash!
      console.log("Nami Cred Hash = ", namiCredHash)


      // Now we connect from Seed
      const options = {
        accountIndex: 0, // Replace 0 with the desired account index value
        // You can also provide other optional properties like addressType and password if needed
        // addressType: "Base",
        // password: "your_password_here",
      };
      lucid.selectWalletFromSeed(seed, options);
      const address = await lucid.wallet.address();
      const { paymentCredential: seedCredential } = lucid.utils.getAddressDetails(
        await lucid.wallet.address(),
      );       
      const seedCredHash = seedCredential?.hash!
      console.log("Seed Cred Hash = ", seedCredHash)

      setPrivAddress(address);
      console.log("address 0 for seed phrase ", address)
    }
  }   // End infoFromSeed


  const createPrivateKey = async (key: string) => { 
    // const seed = lucid.utils.generateSeedPhrase();
    // console.log("Seed phrase created: ", seed)
    if (lucid) {
      // const seed1 = "year gold install glide mirror useful assault very bid leader shuffle soon hamster betray raven entry very brick leave federal aim dress suit suit"
      // const options = {
      //   accountIndex: 1, // Replace 0 with the desired account index value
      //   // You can also provide other optional properties like addressType and password if needed
      //   // addressType: "Base",
      //   // password: "your_password_here",
      // };
      const privateKey = lucid.utils.generatePrivateKey(); // Bech32 encoded private key
      lucid.selectWalletFromPrivateKey(privateKey);
      console.log("Private key ", privateKey)
      // cboe Hex - 5820fed6c111612c424b6bbe28b42e388faa3ec2102b7cd56fb249dc326a4f808498
      //Private key ed25519_sk1rkm9k26wpt9524q6pzmf94ltw9z5z2qe0zzhvau0kam46xq8m6yqw3lpcw
      //crowdfund.tsx:374 address 1 for seed phrase  addr_test1vr4cmkp58duj520sszr3hkfkjpzc04e29nega3acqeadgycxkd60u

      // lucid.selectWalletFromSeed(seed, options);
      const address = await lucid.wallet.address();
      // addr_test1vq8f02sr8nhwwckz22zumny59pch3uqmgkjctlgdfk5rs7sx52ldh   - beneficiary from CDP
      console.log("address 1 for seed phrase ", address)
    }
  }   // End infoFromSeed



  async function writeToServerFile() {
    try {
      const response = await fetch('/api/writeToFile', {
        method: 'POST',
      });
  
      if (response.ok) {
        console.log('From CrowdFund - Data written to the file successfully!');
      } else {
        console.error('Failed to write data to the file.');
      }
    } catch (error) {
      console.error('Error:', error);
    }
  }

 

  const handleChangePrivateKey = (event: React.ChangeEvent<HTMLInputElement>) => {
    setInputValuePrivateKey(event.target.value);
  };
  const handleButtonClickPriv = async () => {
    try {
      await showAddress4PrivateKey(inputPrivateKey); // Use 'await' to wait for the asynchronous function to complete
    } catch (error) {
      // Handle any errors that might occur during the asynchronous operation
      console.error('Error in showAddress4PrivateKey:', error);
    }
  };  

  const showAddress4PrivateKey = async (key: string) => { 
    // Input private will show Address
    if (lucid) {
      lucid.selectWalletFromPrivateKey(key);
      const address = await lucid.wallet.address();
      // addr_test1vq8f02sr8nhwwckz22zumny59pch3uqmgkjctlgdfk5rs7sx52ldh   - beneficiary from CDP
      setPrivAddress(address); 
      console.log("address 1 for seed phrase ", address)
    }
  }   // End showAddress4PrivateKey



  const fetchSecretData = async () => {
    try {
      const response = await fetch('/api/getData');
      const data = await response.json();
      setReadSecretData(data);
      if (data.items[0]) {
        const contributorSeed = data.seed[0].description;
      }      
    } catch (error) {
      console.error('Error fetching secret data:', error);
    }
  };  

  const testCode = async () => { 
    // Input private will show Address
    if (lucid) {
      const date1 = Date.now();
      const date2 = date1 + 10000000000;
      // 1690862203312
      // 1690947216000
      // 1691033616 - 1690862311
      const slot1 = lucid.utils.unixTimeToSlot(date2)
      const slotTime1 = lucid.utils.slotToUnixTime(slot1)
      console.log("date 1 = ", date1)
      console.log("date 2 = ", date2)
      console.log("slot 1 = ", slot1)
      console.log("slotTime 1 = ", slotTime1)

      // Usage
      const originalText = 'Hello, world!';
      const encryptionKey = 'myOwnPassword';
      const encryptedText = encrypt(originalText, encryptionKey);
      console.log('Encrypted:', encryptedText);
      
      const decryptedText = decrypt(encryptedText, encryptionKey);
      console.log('Decrypted:', decryptedText);      

      //infoFromSeed

      // fetchFirstLine(); // Call the function when the component mounts
    }
  }   // End showAddress4PrivateKey


// Encrypt function
  function encrypt(text: string, key: string): string {
    const encrypted = CryptoJS.AES.encrypt(text, key);
    return encrypted.toString();
  }

  // Decrypt function
  function decrypt(encryptedText: string, key: string): string {
    const decrypted = CryptoJS.AES.decrypt(encryptedText, key);
    return decrypted.toString(CryptoJS.enc.Utf8);
  }


  async function fetchFirstLine() {
    console.log("Starting fetch first line")
    try {
      const response = await fetch('/api/read-file', {
        method: 'GET',
      })
      console.log("Starting fetch second line - response.ok = ", response.ok)
      if (response.ok) {
        const data = await response.json();
        console.log('CrowdFund-FetchFirstLine - Data read from file successfully! JSON = ', data);     
        const firstLine =   data.firstLine
        setFirstLine(firstLine);
      } else {
        console.error('Failed to read data to the file.' , response.status);
      }
    } catch (error) {
      console.error('Error:', error);
    }
  }


  // const fetchFirstLine = async () => {
  //   try {
  //     console.log("in fetchFirstLine 1st line ")
  //     const response = await fetch('/api/read-file');
  //     console.log("in fetchFirstLine 2nd line - response.ok is ", response.ok)
  //     if (response.ok) {
  //       const data = await response.json();
  //       setFirstLine(data.firstLine);
  //     } else {
  //       console.error('Error fetching data:', response.statusText);
  //     }
  //   } catch (error) {
  //     console.error('Error fetching data:', error);
  //   }
  // };


  return (
    <div className="px-10">
      <div className="navbar bg-base-100">
        <div className="flex-1">
          <Link href="/" className="btn btn-ghost normal-case text-xl">Cardano</Link>
        </div>
        <div className="flex-none">
          <WalletConnect />
        </div>
      </div>
      <div>Address: {walletStore.address}</div>
      <div className='m-10'>
        {/* <p> 
          Emurgo example
        </p> */}
      </div>
      <div className="mx-60 my-10">
        <button className="btn btn-primary m-5" onClick={() => { sMintCrowdFundToken() }} >sMintCrowdFundToken</button>
        <button className="btn btn-primary m-5" onClick={() => { sPrintScriptAddress() }} >sPrintScriptAddress</button>
        {/* <button className="btn btn-primary m-5" onClick={() => { sDeposit() }} >sDepositCrowd</button> */}
        <button className="btn btn-secondary m-5" onClick={() => { sSpend() }}>sSpendCrowd</button>
        <button className="btn btn-secondary m-5" onClick={() => { sSpendAndDeposit() }}> sSpendAndDeposit</button>
        <button className="btn btn-secondary m-5" onClick={() => { writeToServerFile() }}> writeToServerFile</button>
        <button className="btn btn-secondary m-5" onClick={() => { fetchFirstLine() }}> fetchFirstLine</button>
      </div>

      <div className="mx-60 my-10">
        {/* <button className="btn btn-primary m-5" onClick={() => { sDeposit() }} >sDepositCrowd</button> */}
        <button className="btn btn-secondary m-5" onClick={handleButtonSDeposit}> sDepositCrowd</button>
        {txHash !== null && <p>Tx Hash: {txHash}</p>}
      </div>

      <div className="mx-60 my-10">
        <button className="btn btn-secondary m-5" onClick={() => { createSeedPhrase() }}> createSeedPhrase</button>
        <button className="btn btn-secondary m-5" onClick={() => { createPrivateKey() }}> createPrivateKey</button>
        {privAddress !== null && <p>Result: {privAddress}</p>}
      </div>

      {/* <div className="mx-60 my-10" style={{ padding: '120px' }}> */}
      <div className="mx-60 my-10" style={{ padding: '40px'}}>
          <input
          type="text"
          value={inputValue}
          onChange={handleChange}
          placeholder="Enter your Seed Phrase"
          style={{ width: '1200px' }} // Set the width to your desired value
          />
          {/* <button className="btn btn-secondary m-5" onClick={() => { infoFromSeed(inputValue) }}> infoFromSeed</button> */}
          <button className="btn btn-secondary m-5" onClick={handleButtonClickSeedInfo}> info From Seed</button>
          {privAddress !== null && <p>Address: {privAddress}</p>}
      </div>
      <div className="mx-60 my-10" style={{ padding: '40px'}}>
          <input
          type="text"
          value={inputPrivateKey}
          onChange={handleChangePrivateKey}
          placeholder="Enter your Private key"
          style={{ width: '800px' }} // Set the width to your desired value
          />
          <button className="btn btn-secondary m-5" onClick={handleButtonClickPriv}> Show Address for Private Key</button>
          {privAddress !== null && <p>Address: {privAddress}</p>}
      </div>
        {/* <button className="btn btn-secondary m-5" onClick={() => { unlockGuess() }}>Unlock Guess</button>
        <button className="btn btn-secondary m-5" onClick={() => { deploySequentialMint("Boo") }}>Deploy Sequential Mint</button>
        <button className="btn btn-secondary m-5" onClick={() => { getOffers(paymentCredentialOf(walletStore.address)) }}>Unlock Guess</button> */}
      <div className="mx-60 my-10">
        <button className="btn btn-secondary m-5" onClick={() => { testCode() }}> testCode</button>
        <h1>First Line from File:</h1>
        <p>{firstLine}</p>
      </div>
      <div>
        <button className="btn btn-secondary m-5" onClick={fetchSecretData}>Fetch Secret Data</button>
        {/* <button className="btn btn-secondary m-5" onClick={() => { testCode() }}> testCode</button> */}
        {readSecretData && (
          <div>
            <pre>{JSON.stringify(readSecretData, null, 2)}</pre>   // this gives the whole JSON file  
            <h2> {readSecretData.seed[0].name} : {readSecretData.seed[0].description}</h2>
          </div>
        )}
      </div>      
    </div>
    
  )   // End return
}

// export default Helios
export default crowdfund
